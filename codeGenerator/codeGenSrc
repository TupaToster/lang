DEFCMD (SC, ";", 2, {

    if (Token->type == SC) {

        Token++;
        return;
    }
    else call_next (tree, iter, token, varTable, funcTable);
})

DEFCMD (EQ, "=", 1)

DEFCMD (OR, "or", 1)

DEFCMD (AND, "and", 1)

DEFCMD (LESS, "<", 1)

DEFCMD (GREATER, ">", 1)

DEFCMD (EQEQ, "==", 1)

DEFCMD (LESSEQ, "<=", 1)

DEFCMD (GREATEREQ, ">=", 1)

DEFCMD (PLUS, "+", 1)

DEFCMD (MINUS, "-", 1)

DEFCMD (MULT, "*", 1)

DEFCMD (DIV, "/", 1)

DEFCMD (INT_CONST, "_INT_CONST", 3)

DEFCMD (DOUBLE_CONST, "_DOUBLE_CONST", 3)

DEFCMD (CHAR_CONST, "_CHAR_CONST", 3)

DEFCMD (STR_CONST, "_STR_CONST", 3)

DEFCMD (RETURN, "return", 2, {

    if (Token->type == RETURN) {

        set (tree, {

            iter->push_back (Token);
            Token->prev = iter;
        })

        Token++;
        assert (inSize);

        Get_1 (tree, Token - 1, token, varTable, funcTable);
    }
    else call_next (tree, iter, token, varTable, funcTable);
})

DEFCMD (LB, "(", 0)

DEFCMD (RB, ")", 2, {

    if (Token->type == LB) {

        Token++;
        while (Token->type != RB) Get_1 (tree, iter, token, varTable, funcTable);
        assert (Token->type == RB);
        Token++;
    }
    else call_next (tree, iter, token, varTable, funcTable);
})

DEFCMD (IF, "if", 2, {

    if (Token->type == IF) {

        Nod* ifPtr = Token;

        set (tree, {

            Token->prev = iter;
            iter->push_back (Token);
            Token++;
            assert (inSize);
        })

        assert (Token->type == LB);

        Get_1 (tree, ifPtr, token, varTable, funcTable);

        assert (Token->type == LFB);

        Token++;
        assert (inSize);

        varTable->newLayer ();
        funcTable->newLayer ();

        while (inSize and Token->type != RFB) Get_1 (tree, ifPtr, token, varTable, funcTable);
        assert (inSize);

        varTable->eraseLayer ();
        funcTable->eraseLayer ();

        assert (Token->type == RFB);

        Token++;
        assert (inSize);

        if (Token->type == ELSE) {

            set (tree, {

                ifPtr->push_back (Token);
                Token->prev = ifPtr;
            })

            Nod* elsePtr = Token;

            Token++;
            assert (inSize);

            assert (Token->type == LFB);

            Token++;
            assert (inSize);

            varTable->newLayer ();
            funcTable->newLayer ();

            while (inSize and Token->type != RFB) Get_1 (tree, elsePtr, token, varTable, funcTable);
            assert (inSize);

            varTable->eraseLayer ();
            funcTable->eraseLayer ();

            assert (Token->type == RFB);

            Token++;
        }
    }
    else call_next (tree, iter, token, varTable, funcTable);
})

DEFCMD (WHILE, "while", 2, {

    if (Token->type == WHILE) {

        Nod* whilePtr = Token;

        set (tree, {

            Token->prev = iter;
            iter->push_back (Token);
        })
        Token++;
        assert (inSize);

        assert (Token->type == LB);

        Get_1 (tree, whilePtr, token, varTable, funcTable);

        assert (Token->type == LFB);

        Token++;
        assert (inSize);

        varTable->newLayer ();
        funcTable->newLayer ();

        while (Token->type != RFB) Get_1 (tree, whilePtr, token, varTable, funcTable);

        varTable->eraseLayer ();
        funcTable->eraseLayer ();

        assert (Token->type == RFB);

        Token++;
        assert (inSize);

        if (Token->type == ELSE) {

            Nod* elsePtr = Token;

            set (tree, {

                Token->prev = whilePtr;
                whilePtr->push_back (Token);
            })
            Token++;
            assert (inSize);

            assert (Token->type == LFB);

            Token++;
            assert (inSize);

            varTable->newLayer ();
            funcTable->newLayer ();

            while (Token->type != RFB) Get_1 (tree, elsePtr, token, varTable, funcTable);

            varTable->eraseLayer ();
            funcTable->eraseLayer ();

            assert (Token->type == RFB);

            Token++;
        }
    }
    else call_next (tree, iter, token, varTable, funcTable);
})

DEFCMD (FUNC, "_FUNC", 2, {

    // !!!!!! FUNC reader must always be infront of VAR reader
    if (IS_TYPE (Token->type)) {

        assert (inSize - 1);
        assert ((Token + 1)->type == BLANK);

        if (inSize - 2 and !(inSize - 3) or (Token + 2)->type != LB) {

            call_next (tree, iter, token, varTable, funcTable);
            return;
        }

        Nod* funcPtr = Token + 1;

        if (varTable->findByName (funcPtr->val.STR) != NULL or funcTable->findByName (funcPtr->val.STR) != NULL) {

            printf ("Attempted redefinition of a function on ptr %p. For detailed information visit \"logs_out\".\n", funcPtr);
            dumpNodArray (tree->getData (), tree->getSize ());
            dump (*tree);
            dump (*varTable);
            dump (*funcTable);
            assert ("Stopping" == NULL);
        }

        set (tree, {

            (Token + 1)->type = FUNC;
            (Token + 1)->push_back (Token);
            Token->prev = Token + 1;
            iter->push_back (Token + 1);
            (Token + 1)->prev = iter;
        })


        Token += 2;

        assert (Token->type == LB);

        Token++;

        int paramCounter = 0;
        assert (inSize);

        varTable->newLayer ();
        while (Token->type != RB) {

            call_next (tree, funcPtr, token, varTable, funcTable);
            assert (inSize);
            paramCounter++;
            if (Token->type == RB) break;
            assert (Token->type == COMA);
            Token++;
        }

        set (tree, {

            funcPtr->next[0]->val = paramCounter;
        })

        Token++;
        assert (inSize);
        assert (Token->type == LFB);

        funcTable->addElem (funcPtr);
        funcTable->newLayer ();

        Token++;
        while (Token->type != RFB) Get_1 (tree, funcPtr, token, varTable, funcTable);

        varTable->eraseLayer ();

        funcTable->eraseLayer ();

        assert (inSize);
        assert (Token->type == RFB);
        Token++;
    }
    else call_next (tree, iter, token, varTable, funcTable);
})

DEFCMD (VAR, "_VAR", 2, {

    if (IS_TYPE (Token->type)){

        Token++;
        assert (inSize);
        assert (Token->type == BLANK);

        if (varTable->findByName (Token->val.STR) != NULL or funcTable->findByName (Token->val.STR) != NULL) {

            printf ("Attempted redefinition of a variable on ptr %p. For detailed information visit \"logs_out\".\n", Token);
            dumpNodArray (tree->getData (), tree->getSize ());
            dump (*tree);
            dump (*varTable);
            dump (*funcTable);
            assert ("Stopping" == NULL);
        }

        set (tree, {

            Token->type = VAR;
            Token->push_back (Token - 1);
            (Token - 1)->prev = Token;
            Token->prev = iter;
            iter->push_back (Token);
        })

        varTable->addElem (Token);

        Token++;

        if (inSize and Token->type == EQ) {

            Token++;
            assert (inSize);
            if (INT_MATCH ((Token - 3)->type, Token->type) or
                DOUBLE_MATCH ((Token - 3)->type, Token->type) or
                CHAR_MATCH ((Token - 3)->type, Token->type)) {

                    set (tree, {

                        (Token - 3)->val = Token->val;
                    })
                }
            else if (STR_MATCH ((Token - 3)->type, Token->type)){

                set (tree, {

                    (Token - 3)->val.STR = Token->val.STR;
                    assert ((Token - 3)->val.STR != NULL);
                })
            }
            else assert ("Error of kind: <type> <var_name> = <wrong_type>; or <type> <var_name> = ;\n\n" == NULL);

            Token++;
        }
    }
    else if (Token->type == BLANK) {

        Nod* definition = varTable->findByName (Token->val.STR);

        if (definition == NULL) call_next (tree, iter, token, varTable, funcTable);
        set (tree, {

            iter->push_back (Token);
            Token->prev = iter;
            Token->type = VAR;
            Token->push_back (definition);
        })

        Token++;
    }
    else call_next (tree, iter, token, varTable, funcTable);
})

DEFCMD (ELSE, "else", 0)

DEFCMD (INT, "int", 0)

DEFCMD (DOUBLE, "double", 0)

DEFCMD (CHAR, "char", 0)

DEFCMD (STR, "string", 0)

DEFCMD (LFB, "{", 0)

DEFCMD (RFB, "}", 0)

DEFCMD (LSB, "[", 0)

DEFCMD (RSB, "]", 0)

DEFCMD (COMA, ",", 0)