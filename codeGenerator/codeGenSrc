DEFCMD (SC, ";", 2, {

    if (Token->type == SC) {

        Token++;
        return;
    }
    else call_next (tree, iter, token, varTable, funcTable);
}, 0)

DEFCMD (EQ, "=", 1, 1, {

    if (iter->type == EQ) {

        assert (iter->size == 2);
        assert (iter->next[0]->type == VAR);

        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);

        fprintf (outFile, "pop [%u]\n", iter->next[0]->next[0]->num);
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (OR, "or", 1, 1, {

    if (iter->type == OR) {

        assert (iter->size == 2);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);
        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);
        fprintf (outFile, "add\n");
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (AND, "and", 1, 1, {

    if (iter->type == AND) {

        assert (iter->size == 2);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);
        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);
        fprintf (outFile, "mult\n");
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (LESS, "<", 1, 1, {

    if (iter->type == LESS) {

        assert (iter->size == 2);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);
        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);
        fprintf (outFile, "jb :%d\npush 0\njmp :%d\n%d:\npush 1\n%d:\n", *tagCnt, *tagCnt + 1, *tagCnt, *tagCnt + 1);
        *tagCnt += 2;
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (GREATER, ">", 1, 1, {

    if (iter->type == GREATER) {

        assert (iter->size == 2);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);
        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);
        fprintf (outFile, "ja :%d\npush 0\njmp :%d\n%d:\npush 1\n%d:\n", *tagCnt, *tagCnt + 1, *tagCnt, *tagCnt + 1);
        *tagCnt += 2;
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (EQEQ, "==", 1, 1, {

    if (iter->type == EQEQ) {

        assert (iter->size == 2);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);
        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);
        fprintf (outFile, "je :%d\npush 0\njmp :%d\n%d:\npush 1\n%d:\n", *tagCnt, *tagCnt + 1, *tagCnt, *tagCnt + 1);
        *tagCnt += 2;
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (LESSEQ, "<=", 1, 1, {

    if (iter->type == LESSEQ) {

        assert (iter->size == 2);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);
        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);
        fprintf (outFile, "jbe :%d\npush 0\njmp :%d\n%d:\npush 1\n%d:\n", *tagCnt, *tagCnt + 1, *tagCnt, *tagCnt + 1);
        *tagCnt += 2;
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (GREATEREQ, ">=", 1, 1, {

    if (iter->type == GREATEREQ) {

        assert (iter->size == 2);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);
        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);
        fprintf (outFile, "jae :%d\npush 0\njmp :%d\n%d:\npush 1\n%d:\n", *tagCnt, *tagCnt + 1, *tagCnt, *tagCnt + 1);
        *tagCnt += 2;
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (NOTEQ, "!=", 1, 1, {

    if (iter->type == NOTEQ) {

        assert (iter->size == 2);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);
        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);
        fprintf (outFile, "jne :%d\npush 0\njmp :%d\n%d:\npush 1\n%d:\n", *tagCnt, *tagCnt + 1, *tagCnt, *tagCnt + 1);
        *tagCnt += 2;
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (PLUS, "+", 1, 1, {

    if (iter->type == PLUS) {

        assert (iter->size == 2);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);
        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);
        fprintf (outFile, "add\n");
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (MINUS, "-", 1, 1, {

    if (iter->type == MINUS) {

        assert (iter->size == 2);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);
        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);
        fprintf (outFile, "sub\n");
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (MULT, "*", 1, 1, {

    if (iter->type == MULT) {

        assert (iter->size == 2);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);
        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);
        fprintf (outFile, "mult\n");
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (DIV, "/", 1, 1, {

    if (iter->type == DIV) {

        assert (iter->size == 2);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);
        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);
        fprintf (outFile, "div\n");
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (INT_CONST, "_INT_CONST", 3, 1, {

    if (iter->type == INT_CONST) {

        assert (iter->size == 0);

        fprintf (outFile, "push %d\n", iter->val.I);
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (DOUBLE_CONST, "_DOUBLE_CONST", 3, 1, {

    if (iter->type == DOUBLE_CONST) {

        assert (iter->size == 0);

        fprintf (outFile, "push %lf\n", iter->val.LF);
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (OUT, "out", 3, 1, {

    if (iter->type == OUT) {

        fprintf (outFile, "push [0]\nout\n");
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (CHAR_CONST, "_CHAR_CONST", 3, 0)

DEFCMD (STR_CONST, "_STR_CONST", 3, 0)

DEFCMD (BREAK, "break", 3, 0)

DEFCMD (RETURN, "return", 2, {

    if (Token->type == RETURN) {

        set (tree, {

            iter->push_back (Token);
            Token->prev = iter;
        })

        Token++;
        assert (inSize);

        Get_1 (tree, Token - 1, token, varTable, funcTable);
    }
    else call_next (tree, iter, token, varTable, funcTable);
}, 0)

DEFCMD (LB, "(", 0, 0)

DEFCMD (RB, ")", 2, {

    if (Token->type == LB) {

        Token++;
        while (Token->type != RB) Get_1 (tree, iter, token, varTable, funcTable);
        assert (Token->type == RB);
        Token++;
    }
    else call_next (tree, iter, token, varTable, funcTable);
}, 0)

DEFCMD (IF, "if", 2, {

    if (Token->type == IF) {

        Nod* ifPtr = Token;

        set (tree, {

            Token->prev = iter;
            iter->push_back (Token);
            Token++;
            assert (inSize);
        })

        assert (Token->type == LB);

        Get_1 (tree, ifPtr, token, varTable, funcTable);

        assert (Token->type == LFB);

        Token++;
        assert (inSize);

        varTable->newLayer ();
        funcTable->newLayer ();

        while (inSize and Token->type != RFB) Get_1 (tree, ifPtr, token, varTable, funcTable);
        assert (inSize);

        varTable->eraseLayer ();
        funcTable->eraseLayer ();

        assert (Token->type == RFB);

        Token++;

        if (inSize and Token->type == ELSE) {

            set (tree, {

                ifPtr->push_back (Token);
                Token->prev = ifPtr;
            })

            Nod* elsePtr = Token;

            Token++;
            assert (inSize);

            assert (Token->type == LFB);

            Token++;
            assert (inSize);

            varTable->newLayer ();
            funcTable->newLayer ();

            while (inSize and Token->type != RFB) Get_1 (tree, elsePtr, token, varTable, funcTable);
            assert (inSize);

            varTable->eraseLayer ();
            funcTable->eraseLayer ();

            assert (Token->type == RFB);

            Token++;
        }
    }
    else call_next (tree, iter, token, varTable, funcTable);
}, 1, {

    if (iter->type == IF) {

        assert (iter->size > 0);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);

        fprintf (outFile, "push 0\nje :%d\n", *tagCnt);
        size_t ifEndTag = *tagCnt;
        ++*tagCnt;

        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);

        if (iter->next[iter->size - 1]->type == ELSE) {

            fprintf (outFile, "jmp :%d\n%d:\n", *tagCnt, ifEndTag);
            size_t elseEndTag = *tagCnt;
            ++*tagCnt;

            Set_1 (tree, iter->next[iter->size - 1]->next[0], outFile, tagCnt, freeMemPtr);

            fprintf (outFile, "%d:\n", elseEndTag);
        }
        else fprintf (outFile, "%d:\n", ifEndTag);
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (WHILE, "while", 2, {

    if (Token->type == WHILE) {

        Nod* whilePtr = Token;

        set (tree, {

            Token->prev = iter;
            iter->push_back (Token);
        })
        Token++;
        assert (inSize);

        assert (Token->type == LB);

        Get_1 (tree, whilePtr, token, varTable, funcTable);

        assert (Token->type == LFB);

        Token++;
        assert (inSize);

        varTable->newLayer ();
        funcTable->newLayer ();

        while (Token->type != RFB) Get_1 (tree, whilePtr, token, varTable, funcTable);

        varTable->eraseLayer ();
        funcTable->eraseLayer ();

        assert (Token->type == RFB);

        Token++;

        if (inSize and Token->type == ELSE) {

            Nod* elsePtr = Token;

            set (tree, {

                Token->prev = whilePtr;
                whilePtr->push_back (Token);
            })
            Token++;
            assert (inSize);

            assert (Token->type == LFB);

            Token++;
            assert (inSize);

            varTable->newLayer ();
            funcTable->newLayer ();

            while (Token->type != RFB) Get_1 (tree, elsePtr, token, varTable, funcTable);

            varTable->eraseLayer ();
            funcTable->eraseLayer ();

            assert (Token->type == RFB);

            Token++;
        }
    }
    else call_next (tree, iter, token, varTable, funcTable);
}, 1, {

    if (iter->type == WHILE) {

        assert (iter->size > 1);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);

        fprintf (outFile, "push 0\nje :%u\n", *tagCnt);
        size_t whileEnd = *tagCnt;
        ++*tagCnt;
        size_t whileStart = *tagCnt;
        ++*tagCnt;
        size_t elseEnd = *tagCnt;
        ++*tagCnt;

        fprintf (outFile, "%u:\n", whileStart);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);

        fprintf (outFile, "push 0\nje :%u\n", elseEnd);

        for (int i = 1; i < iter->size - (iter->next[iter->size - 1]->type == ELSE ? 1 : 0); i++){
            if (iter->next[i]->type == BREAK) fprintf (outFile, "jmp :%u\n", elseEnd);
            else Set_1 (tree, iter->next[i], outFile, tagCnt, freeMemPtr);
        }

        fprintf (outFile, "jmp :%u\n%u:\n", whileStart, whileEnd);

        if (iter->next[iter->size - 1]->type == ELSE) {

            for (int i = 0; i < iter->next[iter->size - 1]->size; i++) Set_1 (tree, iter->next[iter->size - 1]->next[i], outFile, tagCnt, freeMemPtr);
        }

        fprintf (outFile, "%u:\n", elseEnd);
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (FOR, "for", 2, {

    if (Token->type == FOR) {

        Nod* forPtr = Token;

        set (tree, {

            Token->prev = iter;
            iter->push_back (Token);
        })

        Token++;
        assert (inSize);

        assert (Token->type == LB);

        varTable->newLayer ();
        funcTable->newLayer ();

        Token++;
        assert (inSize);

        Get_1 (tree, forPtr, token, varTable, funcTable);

        assert (inSize);
        assert (Token->type == SC);
        Token++;
        assert (inSize);

        Get_1 (tree, forPtr, token, varTable, funcTable);

        assert (inSize);
        assert (Token->type == SC);
        Token++;
        assert (inSize);

        Get_1 (tree, forPtr, token, varTable, funcTable);

        assert (inSize);
        assert (Token->type == RB);

        Token++;
        assert (inSize);

        assert (Token->type == LFB);

        Token++;
        assert (inSize);

        while (Token->type != RFB) Get_1 (tree, forPtr, token, varTable, funcTable);

        varTable->eraseLayer ();
        funcTable->eraseLayer ();

        assert (Token->type == RFB);

        Token++;

        if (inSize and Token->type == ELSE) {

            Nod* elsePtr = Token;

            set (tree, {

                Token->prev = forPtr;
                forPtr->push_back (Token);
            })

            Token++;
            assert (inSize);

            assert (Token->type == LFB);

            Token++;
            assert (inSize);

            varTable->newLayer ();
            funcTable->newLayer ();

            while (Token->type != RFB) Get_1 (tree, elsePtr, token, varTable, funcTable);

            varTable->eraseLayer ();
            funcTable->eraseLayer ();

            Token++;
        }
    }
    else call_next (tree, iter, token, varTable, funcTable);
}, 1, {

    if (iter->type == FOR) {

        assert (iter->size > 3);

        Set_1 (tree, iter->next[0], outFile, tagCnt, freeMemPtr);

        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);

        fprintf (outFile, "push 0\nje :%u\n", *tagCnt);
        size_t forEnd = *tagCnt;
        ++*tagCnt;
        size_t forStart = *tagCnt;
        ++*tagCnt;
        size_t elseEnd = *tagCnt;
        ++*tagCnt;

        fprintf (outFile, "%u:\n", forStart);

        Set_1 (tree, iter->next[1], outFile, tagCnt, freeMemPtr);

        fprintf (outFile, "push 0\nje :%u\n", elseEnd);

        for (int i = 3; i < iter->size and iter->next[i]->type != ELSE; i++)
            Set_1 (tree, iter->next[i], outFile, tagCnt, freeMemPtr);

        Set_1 (tree, iter->next[2], outFile, tagCnt, freeMemPtr);

        fprintf (outFile, "jmp :%u\n%u:", forStart, forEnd);

        if (iter->next[iter->size - 1]->type == ELSE) {

            for (int i = 0; i < iter->next[iter->size - 1]->size; i++)
                Set_1 (tree, iter->next[iter->size - 1]->next[i], outFile, tagCnt, freeMemPtr);
        }

        fprintf (outFile, "%u:\n", elseEnd);
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (FUNC, "_FUNC", 2, {

    // !!!!!! FUNC reader must always be infront of VAR reader
    if (IS_TYPE (Token->type)) {

        assert (inSize - 1);
        assert ((Token + 1)->type == BLANK);

        if (inSize - 2 and !(inSize - 3) or (Token + 2)->type != LB) {

            call_next (tree, iter, token, varTable, funcTable);
            return;
        }

        Nod* funcPtr = Token + 1;

        if (varTable->findByName (funcPtr->val.STR) != NULL or funcTable->findByName (funcPtr->val.STR) != NULL) {

            printf ("Attempted redefinition of a function on ptr %p. For detailed information visit \"logs_out\".\n", funcPtr);
            dumpNodArray (tree->getData (), tree->getSize ());
            dump (*tree);
            dump (*varTable);
            dump (*funcTable);
            assert ("Stopping" == NULL);
        }

        set (tree, {

            (Token + 1)->type = FUNC;
            (Token + 1)->push_back (Token);
            Token->prev = Token + 1;
            iter->push_back (Token + 1);
            (Token + 1)->prev = iter;
        })


        Token += 2;

        assert (Token->type == LB);

        Token++;

        int paramCounter = 0;
        assert (inSize);

        varTable->newLayer ();
        while (Token->type != RB) {

            call_next (tree, funcPtr, token, varTable, funcTable);
            assert (inSize);
            paramCounter++;
            if (Token->type == RB) break;
            assert (Token->type == COMA);
            Token++;
        }

        set (tree, {

            funcPtr->next[0]->val = paramCounter;
        })

        Token++;
        assert (inSize);
        assert (Token->type == LFB);

        funcTable->addElem (funcPtr);
        funcTable->newLayer ();

        Token++;
        while (Token->type != RFB)
            Get_1 (tree, funcPtr, token, varTable, funcTable);

        varTable->eraseLayer ();
        funcTable->eraseLayer ();

        assert (inSize);
        assert (Token->type == RFB);
        Token++;
    }
    else if (Token->type == BLANK) {

        if (funcTable->findByName (Token->val.STR) == NULL) {

            call_next (tree, iter, token, varTable, funcTable);
            return;
        }

        Nod* defPtr = funcTable->findByName (Token->val.STR);
        Nod* funcPtr = Token;

        set (tree, {

            Token->type = FUNC;
            Token->push_back (defPtr);
            iter->push_back (Token);
            Token->prev = iter;
        })

        Token++;
        assert (inSize);

        assert (Token->type == LB);

        Token++;
        assert (inSize);

        while (Token->type != RB) {

            Get_1 (tree, funcPtr, token, varTable, funcTable);
            assert (inSize);
            if (Token->type == RB) break;
            assert (Token->type == COMA);
            Token++;
            assert (inSize);
        }

        assert (Token->type == RB);

        Token++;
        assert (inSize);

        assert (defPtr->next[0]->val.I == funcPtr->size - 1);
    }
    else call_next (tree, iter, token, varTable, funcTable);
}, 0)

DEFCMD (VAR, "_VAR", 2, {

    if (IS_TYPE (Token->type)){

        Token++;
        assert (inSize);
        assert (Token->type == BLANK);

        if (varTable->findByName (Token->val.STR) != NULL or funcTable->findByName (Token->val.STR) != NULL) {

            printf ("Attempted redefinition of a variable on ptr %p. For detailed information visit \"logs_out\".\n", Token);
            dumpNodArray (tree->getData (), tree->getSize ());
            dump (*tree);
            dump (*varTable);
            dump (*funcTable);
            assert ("Stopping" == NULL);
        }

        set (tree, {

            Token->type = VAR;
            Token->push_back (Token - 1);
            (Token - 1)->prev = Token;
            Token->prev = iter;
            iter->push_back (Token);
        })

        varTable->addElem (Token);

        Token++;

        if (inSize and Token->type == EQ) {

            Token++;
            assert (inSize);
            if (INT_MATCH ((Token - 3)->type, Token->type) or
                DOUBLE_MATCH ((Token - 3)->type, Token->type) or
                CHAR_MATCH ((Token - 3)->type, Token->type)) {

                    set (tree, {

                        (Token - 3)->val = Token->val;
                    })
                }
            else if (STR_MATCH ((Token - 3)->type, Token->type)){

                set (tree, {

                    (Token - 3)->val.STR = Token->val.STR;
                    assert ((Token - 3)->val.STR != NULL);
                })
            }
            else assert ("Error of kind: <type> <var_name> = <wrong_type>; or <type> <var_name> = ;\n\n" == NULL);

            Token++;
        }
    }
    else if (Token->type == BLANK) {

        Nod* definition = varTable->findByName (Token->val.STR);

        if (definition == NULL) call_next (tree, iter, token, varTable, funcTable);
        set (tree, {

            iter->push_back (Token);
            Token->prev = iter;
            Token->type = VAR;
            Token->push_back (definition);
        })

        Token++;
    }
    else call_next (tree, iter, token, varTable, funcTable);
}, 1, {

    if (iter->type == VAR) {

        assert (iter->size == 1);

        if (iter->next[0]->type == VAR) {

            fprintf (outFile, "push [%d]\n", iter->next[0]->num);
        }
        else {

            fprintf (outFile, "push ");
            if (iter->next[0]->type == INT) fprintf (outFile, "%d\n", iter->next[0]->val.I);
            else if (iter->next[0]->type == DOUBLE) fprintf (outFile, "%lf\n", iter->next[0]->val.LF);
            fprintf (outFile, "pop [%d]\n", *freeMemPtr);
            iter->num = *freeMemPtr;
            ++*freeMemPtr;
        }
    }
    else call_next (tree, iter, outFile, tagCnt, freeMemPtr);
})

DEFCMD (COMA, ",", 0, 0)

DEFCMD (ELSE, "else", 0, 0)

DEFCMD (INT, "int", 0, 0)

DEFCMD (DOUBLE, "double", 0, 0)

DEFCMD (CHAR, "char", 0, 0)

DEFCMD (STR, "string", 0, 0)

DEFCMD (LFB, "{", 0, 0)

DEFCMD (RFB, "}", 0, 0)

DEFCMD (LSB, "[", 0, 0)

DEFCMD (RSB, "]", 0, 0)